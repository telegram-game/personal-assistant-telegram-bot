# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/engine/reference/builder/

ARG PYTHON_VERSION=3.12

################################################################################
# Use node image for base image for all stages.
FROM --platform=linux/amd64 python:${PYTHON_VERSION} AS base

# Set working directory for all build stages.
WORKDIR /usr/src/app
ENV HUSKY=0


################################################################################
# Create a stage for installing production dependecies.
FROM base AS deps
# Customize cache invalidation
ARG CACHEBUST=$(date +%s)

# Download dependencies as a separate step to take advantage of Docker's caching.
# into this layer.
COPY requirements.txt .

# Generate prisma schema
RUN pip install --no-cache-dir -r requirements.txt

################################################################################
# Create a new stage to run the application with minimal runtime dependencies
# where the necessary files are copied from the build stage.
FROM base AS final

# Run the application as a non-root user.
USER python

# Copy package.json so that package manager commands can be used.
COPY --chown=python:python package.json .

# Copy the production dependencies from the deps stage and also
# the built application from the build stage into the image.
COPY --chown=node:node --from=deps /usr/src/app/node_modules ./node_modules
COPY --chown=node:node --from=build /usr/src/app/dist ./dist

# Expose the port that the application listens on.
EXPOSE $PORT

# Run the application.
CMD ["node","dist/src/main.js", ">", "/dev/stdout"]
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TetegramBotMessageType {
  ASK
  TRAIN
  START_TRAIN
  APPROVE
}

enum TrainDataStatus {
  PENDING
  PROCESSING
  DONE
  FAILED
}

model TelegramBotMessages {
  id          Int                    @id @default(autoincrement()) @map(name: "id")
  chatId      String                 @map(name: "chat_id")
  messageId   String                 @map(name: "message_id")
  type        TetegramBotMessageType @map(name: "type")
  text        String?                @map(name: "text")
  typeMessage String?                @map(name: "type_message")

  /// [TelegramSender]
  sender     Json?        @map(name: "sender")
  createdAt  DateTime     @default(now()) @map(name: "created_at")
  replyAt    DateTime?    @map(name: "reply_at")
  TraninData TraninData[]
  AIModels   AIModels?

  @@map("telegram-bot-messages")
}

model TraninData {
  id                   Int             @id @default(autoincrement()) @map(name: "id")
  data                 String          @map(name: "data")
  telegramBotMessageId Int?            @unique() @map(name: "telegram_bot_message_id")
  status               TrainDataStatus @map(name: "status")
  createdAt            DateTime        @default(now()) @map(name: "created_at")
  updatedAt            DateTime?       @updatedAt @map(name: "updated_at")
  aiModelId            Int?            @map(name: "ai_model_id")

  telegramBotMessages TelegramBotMessages? @relation(fields: [telegramBotMessageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("train_data")
}

model AIModels {
  id                   Int             @id @default(autoincrement()) @map(name: "id")
  name                 String          @unique @map(name: "name")
  description          String?         @map(name: "description")
  telegramBotMessageId Int?            @unique() @map(name: "telegram_bot_message_id")
  path                 String          @map(name: "path")
  baseModelId          Int?            @map(name: "base_model_id")
  status               TrainDataStatus @default(PENDING) @map(name: "status")

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")

  telegramBotMessages TelegramBotMessages? @relation(fields: [telegramBotMessageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("ai_models")
}
